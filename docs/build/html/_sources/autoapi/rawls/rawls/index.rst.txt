:mod:`rawls.rawls`
==================

.. py:module:: rawls.rawls

.. autoapi-nested-parse::

   Rawls class used to open `.rawls` path image

   .. attribute:: shape

      {(int, int, int)} -- describe shape of the image

   .. attribute:: data

      {ndrray} -- buffer data numpy array

   .. attribute:: details

      {Details} -- details instance information

   .. attribute:: gamma_converted

      {Details} -- specify if Rawls instance is gamma converted or not




---------------


.. data:: extensions
   :annotation: = ['png', 'rawls']

   

.. py:class:: Rawls(shape, data, details, gamma_converted=False)

   .. method:: load(self, filepath)
      :classmethod:


      Open data of rawls file

      :param filepath: {str} -- path of the .rawls file to open

      :returns: Rawls instance
      :rtype: {Rawls}


   .. method:: fusion(self, rawls_image_1, rawls_image_2)
      :classmethod:


      Fusion two rawls images together based on their number of samples

      :param rawls: {Rawls} -- first Rawls image to merge
      :param rawls: {Rawls} -- second Rawls image to merge

      :returns: {Rawls} -- Rawls instance


   .. method:: save(self, outfile, gamma_convert=True)


      Save rawls image into new file

      :param outfile: {str} -- output filename (rawls or png)
      :param gamma_convert: {bool} -- necessary or not to convert using gamma (default: True)


   .. method:: __clamp(self, n, smallest, largest)


      Clamp number using two numbers

      :param n: {float} -- the number to clamp
      :param smallest: {float} -- the smallest number interval
      :param largest: {float} -- the larget number interval

      :returns: {float} -- the clamped value


   .. method:: __gamma_correct(self, value)


      Correct gamma of luminance value

      :param value: {float} -- luminance value to correct

      :returns: {float} -- correct value with specific gamma


   .. method:: __gamma_convert(self, value)


      Correct gamma value and clamp it

      :param value: {float} -- luminance value to correct and clamp

      :returns: {float} -- final chanel value


   .. method:: gammaConvert(self)


      Convert gamma of luminance chanel values of rawls image

      :returns: {ndarray} -- image buffer with converted gamma values


   .. method:: to_pil(self, gamma_convert=True)


      Convert current rawls image into PIL RGB Image

      :param gamma_convert: {bool} -- necessary or not to convert using gamma (default: True)

      :returns: {PIL} -- RGB image converted

      Example:

      >>> import numpy as np
      >>> from rawls.rawls import Rawls
      >>> path = 'images/example_1.rawls'
      >>> rawls_img = Rawls.load(path)
      >>> rawls_pil_img = rawls_img.to_pil()
      >>> np.array(rawls_pil_img).shape
      (100, 100, 3)


   .. method:: to_png(self, outfile, gamma_convert=True)


      Save rawls image into PNG

      :param outfile: {str} -- PNG output filename
      :param gamma_convert: {bool} -- necessary or not to convert using gamma (default: True)


   .. method:: h_flip(self)


      Flip horizontally current Rawls instance


   .. method:: v_flip(self)


      Flip vectically current Rawls instance


   .. method:: copy(self)


      Copy current Rawls instance

      :returns: {Rawls} -- Rawls copy of current instance


   .. method:: normalize(self, max_value=None)


      Give new Rawls instance with normalized data

      :param max_value {float} -- max expected value for normalization (default: {max data value})

      :returns: {Rawls} -- Rawls instance with normalized data


   .. method:: __str__(self)


      Display Rawls information

      :returns: {str} Rawls information



